datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

model User {
  id            String              @id @default(uuid())
  email         String              @unique
  name          String?
  photoUrl      String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  deletedAt     DateTime?
  userBooks     UsersBooks[]
  userExchanges UsersBookExchange[] @relation("TargetUser")
  userInterests UsersBookExchange[] @relation("InteretUser")

  @@index([email])
}

model Book {
  id             Int                 @id @default(autoincrement())
  title          String              @unique
  language       String?
  smallThumbnail String?
  thumbnail      String?
  categories     String[]
  authors        String[]
  pageCount      Int?
  googleId       String?
  publishedAt    DateTime?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  deletedAt      DateTime?
  usersBook      UsersBooks[]
  userAsking     UsersBookExchange[] @relation("AskingBook")
  userInterests  UsersBookExchange[] @relation("InteretBook")

  @@index([title])
}

model UsersBooks {
  id             Int                 @id @default(autoincrement())
  book           Book                @relation(fields: [bookId], references: [id])
  bookId         Int
  user           User                @relation(fields: [userId], references: [id])
  userId         String
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  deletedAt      DateTime?
  usersExchanges UsersBookExchange[]

  @@unique([bookId, userId])
}

model UsersBookExchange {
  id             Int    @id @default(autoincrement())
  targetUser     User   @relation("TargetUser", fields: [targetUserId], references: [id])
  targetUserId   String
  interestBook   Book   @relation("InteretBook", fields: [interestBookId], references: [id])
  interestBookId Int

  interetUser   User   @relation("InteretUser", fields: [interetUserId], references: [id])
  interetUserId String
  askingBook    Book   @relation("AskingBook", fields: [askingBookId], references: [id])
  askingBookId  Int

  userBookInterest UsersBooks @relation(fields: [interestBookId, targetUserId], references: [bookId, userId])

  status    StatusEnum @default(PENDING)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
}

enum StatusEnum {
  DONE
  PENDING
  CANCELED
}
